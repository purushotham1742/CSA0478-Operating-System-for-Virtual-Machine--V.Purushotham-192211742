#include <stdio.h>
#include <stdlib.h>

// Function to calculate the total seek time using the C-SCAN algorithm
int calculateSeekTime(int diskQueue[], int n, int initialPosition) {
    int seekTime = 0;

    // Sorting the requests in ascending order
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (diskQueue[i] > diskQueue[j]) {
                int temp = diskQueue[i];
                diskQueue[i] = diskQueue[j];
                diskQueue[j] = temp;
            }
        }
    }

    int currentPos = initialPosition;
    int lastPos = 199; // Disk size is assumed to be 200

    // Move in one direction (towards the end)
    for (int i = 0; i < n; i++) {
        seekTime += abs(currentPos - diskQueue[i]);
        currentPos = diskQueue[i];
    }

    // Move to the end of the disk
    seekTime += abs(currentPos - lastPos);

    // Jump to the beginning (instantly)
    currentPos = 0;

    // Continue moving in the same direction
    for (int i = 0; i < n; i++) {
        seekTime += abs(currentPos - diskQueue[i]);
        currentPos = diskQueue[i];
    }

    return seekTime;
}

int main() {
    int n;
    printf("Enter the number of disk requests: ");
    scanf("%d", &n);

    int diskQueue[n];
    printf("Enter the disk request queue:\n");
    for (int i = 0; i < n; i++) {
        printf("Request %d: ", i + 1);
        scanf("%d", &diskQueue[i]);
    }

    int initialPosition;
    printf("Enter the initial head position: ");
    scanf("%d", &initialPosition);

    int totalSeekTime = calculateSeekTime(diskQueue, n, initialPosition);

    printf("Total seek time using C-SCAN: %d\n", totalSeekTime);

    return 0;
}
