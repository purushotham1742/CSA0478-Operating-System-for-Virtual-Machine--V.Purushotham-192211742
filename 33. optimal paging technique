#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

#define MAX_FRAMES 3 // Number of page frames in memory

// Function to initialize page frames
void initializeFrames(int frames[], int n) {
    for (int i = 0; i < n; i++) {
        frames[i] = -1; // -1 represents an empty frame
    }
}

// Function to display the current state of page frames
void displayFrames(int frames[], int n) {
    printf("Current Page Frames: ");
    for (int i = 0; i < n; i++) {
        if (frames[i] == -1) {
            printf("[ ] ");
        } else {
            printf("[%d] ", frames[i]);
        }
    }
    printf("\n");
}

// Function to check if a page is already in memory
bool pageExists(int frames[], int n, int page) {
    for (int i = 0; i < n; i++) {
        if (frames[i] == page) {
            return true;
        }
    }
    return false;
}

// Optimal page replacement algorithm
void optimalPageReplacement(int pages[], int num_pages) {
    int frames[MAX_FRAMES];

    initializeFrames(frames, MAX_FRAMES);

    int page_faults = 0;

    for (int i = 0; i < num_pages; i++) {
        int current_page = pages[i];
        displayFrames(frames, MAX_FRAMES);

        if (!pageExists(frames, MAX_FRAMES, current_page)) {
            // Page fault: Find the page in memory that won't be used furthest in the future
            int page_to_replace = -1;
            int furthest_future_use = -1;

            for (int j = 0; j < MAX_FRAMES; j++) {
                int future_use = num_pages; // Set to maximum possible distance
                for (int k = i + 1; k < num_pages; k++) {
                    if (pages[k] == frames[j]) {
                        future_use = k;
                        break;
                    }
                }

                if (future_use > furthest_future_use) {
                    furthest_future_use = future_use;
                    page_to_replace = frames[j];
                }
            }

            for (int j = 0; j < MAX_FRAMES; j++) {
                if (frames[j] == page_to_replace) {
                    frames[j] = current_page;
                    break;
                }
            }

            page_faults++;
        }
    }

    printf("Total Page Faults: %d\n", page_faults);
}

int main() {
    int pages[] = {1, 3, 0, 3, 5, 6, 3};
    int num_pages = sizeof(pages) / sizeof(pages[0]);

    printf("Simulating Optimal Page Replacement Algorithm:\n");
    optimalPageReplacement(pages, num_pages);

    return 0;
}
